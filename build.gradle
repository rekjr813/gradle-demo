import static java.lang.System.getenv

/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jbaruch' at '30/12/13 12:59' with Gradle 1.10
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.10/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.2.0'
    }
}
// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'artifactory-publish'

group = 'com.jfrog.example'
version = '1.0-SNAPSHOT'
status = 'SNAPSHOT'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.11'
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().with {
                    appendNode('packaging', 'jar')
                    appendNode('name', 'gradle-demo')
                    appendNode('description', 'Demo project for Free Stack Demo')
                    appendNode('url', 'https://bitbucket.org/jfrog/gradle-demo')
                    appendNode('licenses').with {
                        appendNode('license').with {
                            appendNode('name', 'The Apache Software License, Version 2.0')
                            appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0')
                        }
                    }
                    appendNode('developers').with {
                        appendNode('developer').with {
                            appendNode('id', 'jbaruch')
                            appendNode('name', 'Baruch Sadogursky')
                            appendNode('email', 'jbaruch@jfrog.com')
                        }
                    }
                    appendNode('scm').with {
                        appendNode('connection', 'git@bitbucket.org:jfrog/gradle-demo.git')
                        appendNode('developerConnection', 'git@bitbucket.org:jfrog/gradle-demo.git')
                        appendNode('url', 'https://bitbucket.org/jfrog/gradle-demo')
                    }
                }
            }
        }
    }
}


artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            //when using oss.jfrog.org the credentials are from Bintray. For local build we expect them to be found in
            //~/.gradle/gradle.properties, otherwise to be set in the build server
            username = project.hasProperty('bintrayUser') ? project.bintrayUser : getenv()['BINTRAY_USER']
            password = project.hasProperty('bintrayKey') ? project.bintrayKey : getenv()['BINTRAY_KEY']
        }
        defaults {
            publications 'main'
        }
    }
}